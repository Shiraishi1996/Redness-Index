import mercantile
import mapbox_vector_tile
import requests
import json
import os
from vt2geojson.tools import vt_bytes_to_geojson
from datetime import datetime
import cv2
import math
import numpy as np
import glob
import pandas as pd
import csv
import folium
from PIL import Image
from PIL.ExifTags import TAGS, GPSTAGS
import zipfile
import streamlit as st
import time
from streamlit_folium import st_folium
import io

hist = pd.DataFrame({"x":[0,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.2,0.21,0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29,0.3,0.31,0.32,0.33,0.34,0.35,0.36,0.37,0.38,0.39,0.4,0.41,0.42,0.43,0.44,0.45,0.46,0.47,0.48,0.49,0.5,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,0.6,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,0.7,0.71,0.72,0.73,0.74,0.75,0.76,0.77,0.78,0.79,0.8,0.81,0.82,0.83,0.84,0.85,0.86,0.87,0.88,0.89,0.9,0.91,0.92,0.93,0.94,0.95,0.96,0.97,0.98,0.99,1,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.2,1.21,1.22,1.23,1.24,1.25,1.26,1.27,1.28,1.29,1.3,1.31,1.32,1.33,1.34,1.35,1.36,1.37,1.38,1.39,1.4,1.41,1.42,1.43,1.44,1.45,1.46,1.47,1.48,1.49,1.5,1.51,1.52,1.53,1.54,1.55,1.56,1.57,1.58,1.59,1.6,1.61,1.62,1.63,1.64,1.65,1.66,1.67,1.68,1.69,1.7,1.71,1.72,1.73,1.74,1.75,1.76,1.77,1.78,1.79,1.8,1.81,1.82,1.83,1.84,1.85,1.86,1.87,1.88,1.89,1.9,1.91,1.92,1.93,1.94,1.95,1.96,1.97,1.98,1.99,2,2.01,2.02,2.03,2.04,2.05,2.06,2.07,2.08,2.09,2.1,2.11,2.12,2.13,2.14,2.15,2.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,2.33,2.34,2.35,2.36,2.37,2.38,2.39,2.4,2.41,2.42,2.43,2.44,2.45,2.46,2.47,2.48,2.49,2.5,2.51,2.52,2.53,2.54,2.55,2.56,2.57,2.58,2.59,2.6,2.61,2.62,2.63,2.64,2.65,2.66,2.67,2.68,2.69,2.7,2.71,2.72,2.73,2.74,2.75,2.76,2.77,2.78,2.79,2.8,2.81,2.82,2.83,2.84,2.85,2.86,2.87,2.88,2.89,2.9,2.91,2.92,2.93,2.94,2.95,2.96,2.97,2.98,2.99,3,3.01,3.02,3.03,3.04,3.05,3.06,3.07,3.08,3.09,3.1,3.11,3.12,3.13,3.14,3.15,3.16,3.17,3.18,3.19,3.2,3.21,3.22,3.23,3.24,3.25,3.26,3.27,3.28,3.29,3.3,3.31,3.32,3.33,3.34,3.35,3.36,3.37,3.38,3.39,3.4,3.41,3.42,3.43,3.44,3.45,3.46,3.47,3.48,3.49,3.5,3.51,3.52,3.53,3.54,3.55,3.56,3.57,3.58,3.59,3.6,3.61,3.62,3.63,3.64,3.65,3.66,3.67,3.68,3.69,3.7,3.71,3.72,3.73,3.74,3.75,3.76,3.77,3.78,3.79,3.8,3.81,3.82,3.83,3.84,3.85,3.86,3.87,3.88,3.89,3.9,3.91,3.92,3.93,3.94,3.95,3.96,3.97,3.98,3.99,4,4.01,4.02,4.03,4.04,4.05,4.06,4.07,4.08,4.09,4.1,4.11,4.12,4.13,4.14,4.15,4.16,4.17,4.18,4.19,4.2,4.21,4.22,4.23,4.24,4.25,4.26,4.27,4.28,4.29,4.3,4.31,4.32,4.33,4.34,4.35,4.36,4.37,4.38,4.39,4.4,4.41,4.42,4.43,4.44,4.45,4.46,4.47,4.48,4.49,4.5,4.51,4.52,4.53,4.54,4.55,4.56,4.57,4.58,4.59,4.6,4.61,4.62,4.63,4.64,4.65,4.66,4.67,4.68,4.69,4.7,4.71,4.72,4.73,4.74,4.75,4.76,4.77,4.78,4.79,4.8,4.81,4.82,4.83,4.84,4.85,4.86,4.87,4.88,4.89,4.9,4.91,4.92,4.93,4.94,4.95,4.96,4.97,4.98,4.99],
"y":[0.5,0.496010644,0.492021686,0.488033527,0.484046563,0.480061194,0.476077817,0.47209683,0.468118628,0.464143607,0.460172163,0.456204687,0.452241574,0.448283213,0.444329995,0.440382308,0.436440537,0.432505068,0.428576284,0.424654565,0.420740291,0.416833837,0.412935577,0.409045885,0.405165128,0.401293674,0.397431887,0.393580127,0.389738752,0.385908119,0.382088578,0.378280478,0.374484165,0.370699981,0.366928264,0.363169349,0.359423567,0.355691245,0.351972708,0.348268273,0.344578258,0.340902974,0.337242727,0.333597821,0.329968554,0.32635522,0.32275811,0.319177509,0.315613697,0.312066949,0.308537539,0.305025731,0.301531788,0.298055965,0.294598516,0.291159687,0.287739719,0.284338849,0.280957309,0.277595325,0.274253118,0.270930904,0.267628893,0.264347292,0.2610863,0.257846111,0.254626915,0.251428895,0.24825223,0.245097094,0.241963652,0.238852068,0.235762498,0.232695092,0.229649997,0.226627352,0.223627292,0.220649946,0.217695438,0.214763884,0.211855399,0.208970088,0.206108054,0.203269392,0.200454193,0.197662543,0.194894521,0.192150202,0.189429655,0.186732943,0.184060125,0.181411255,0.17878638,0.176185542,0.17360878,0.171056126,0.168527607,0.166023246,0.163543059,0.16108706,0.158655254,0.156247645,0.15386423,0.151505003,0.14916995,0.146859056,0.1445723,0.142309654,0.14007109,0.137856572,0.135666061,0.133499513,0.131356881,0.129238112,0.127143151,0.125071936,0.123024403,0.121000484,0.119000107,0.117023196,0.11506967,0.113139446,0.111232437,0.109348552,0.107487697,0.105649774,0.103834681,0.102042315,0.100272568,0.098525329,0.096800485,0.095097918,0.093417509,0.091759136,0.090122672,0.088507991,0.086914962,0.085343451,0.083793322,0.082264439,0.080756659,0.079269841,0.077803841,0.07635851,0.0749337,0.07352926,0.072145037,0.070780877,0.069436623,0.068112118,0.066807201,0.065521712,0.064255488,0.063008364,0.061780177,0.060570758,0.059379941,0.058207556,0.057053433,0.055917403,0.054799292,0.053698928,0.052616138,0.051550748,0.050502583,0.049471468,0.048457226,0.047459682,0.046478658,0.045513977,0.044565463,0.043632937,0.042716221,0.041815138,0.040929509,0.040059157,0.039203903,0.03836357,0.03753798,0.036726956,0.035930319,0.035147894,0.034379502,0.033624969,0.032884119,0.032156775,0.031442763,0.030741909,0.030054039,0.02937898,0.02871656,0.028066607,0.02742895,0.026803419,0.026189845,0.02558806,0.024997895,0.024419185,0.023851764,0.023295468,0.022750132,0.022215594,0.021691694,0.02117827,0.020675163,0.020182215,0.01969927,0.019226172,0.018762766,0.0183089,0.017864421,0.017429178,0.017003023,0.016585807,0.016177383,0.015777607,0.015386335,0.015003423,0.014628731,0.014262118,0.013903448,0.013552581,0.013209384,0.012873721,0.012545461,0.012224473,0.011910625,0.011603792,0.011303844,0.011010658,0.01072411,0.010444077,0.010170439,0.009903076,0.00964187,0.009386706,0.009137468,0.008894043,0.008656319,0.008424186,0.008197536,0.00797626,0.007760254,0.007549411,0.007343631,0.007142811,0.006946851,0.006755653,0.006569119,0.006387155,0.006209665,0.006036558,0.005867742,0.005703126,0.005542623,0.005386146,0.005233608,0.005084926,0.004940016,0.004798797,0.004661188,0.004527111,0.004396488,0.004269243,0.004145301,0.004024589,0.003907033,0.003792562,0.003681108,0.003572601,0.003466974,0.00336416,0.003264096,0.003166716,0.003071959,0.002979763,0.002890068,0.002802815,0.002717945,0.002635402,0.00255513,0.002477075,0.002401182,0.0023274,0.002255677,0.002185961,0.002118205,0.002052359,0.001988376,0.001926209,0.001865813,0.001807144,0.001750157,0.00169481,0.001641061,0.00158887,0.001538195,0.001488999,0.001441242,0.001394887,0.001349898,0.001306238,0.001263873,0.001222769,0.001182891,0.001144207,0.001106685,0.001070294,0.001035003,0.001000782,0.000967603,0.000935437,0.000904255,0.000874032,0.000844739,0.000816352,0.000788846,0.000762195,0.000736375,0.000711364,0.000687138,0.000663675,0.000640953,0.000618951,0.000597648,0.000577025,0.000557061,0.000537737,0.000519035,0.000500937,0.000483424,0.00046648,0.000450087,0.00043423,0.000418892,0.000404058,0.000389712,0.000375841,0.000362429,0.000349463,0.000336929,0.000324814,0.000313106,0.000301791,0.000290857,0.000280293,0.000270088,0.000260229,0.000250707,0.00024151,0.000232629,0.000224053,0.000215773,0.00020778,0.000200064,0.000192616,0.000185427,0.000178491,0.000171797,0.000165339,0.000159109,0.000153099,0.000147302,0.000141711,0.000136319,0.00013112,0.000126108,0.000121275,0.000116617,0.000112127,0.0001078,0.00010363,9.96114E-05,9.57399E-05,9.20101E-05,8.84173E-05,8.49567E-05,8.16238E-05,7.84142E-05,7.53236E-05,7.2348E-05,6.94834E-05,6.67258E-05,6.40716E-05,6.15172E-05,5.90589E-05,5.66935E-05,5.44177E-05,5.22282E-05,5.01221E-05,4.80963E-05,4.61481E-05,4.42745E-05,4.24729E-05,4.07408E-05,3.90756E-05,3.74749E-05,3.59363E-05,3.44576E-05,3.30366E-05,3.16712E-05,3.03594E-05,2.90991E-05,2.78884E-05,2.67256E-05,2.56088E-05,2.45364E-05,2.35066E-05,2.25179E-05,2.15687E-05,2.06575E-05,1.9783E-05,1.89436E-05,1.81382E-05,1.73653E-05,1.66238E-05,1.59124E-05,1.523E-05,1.45755E-05,1.39477E-05,1.33457E-05,1.27685E-05,1.22151E-05,1.16846E-05,1.1176E-05,1.06885E-05,1.02213E-05,9.77365E-06,9.34467E-06,8.93366E-06,8.53991E-06,8.16273E-06,7.80146E-06,7.45547E-06,7.12414E-06,6.80688E-06,6.50312E-06,6.21233E-06,5.93397E-06,5.66753E-06,5.41254E-06,5.16853E-06,4.93505E-06,4.71165E-06,4.49794E-06,4.29351E-06,4.09798E-06,3.91098E-06,3.73215E-06,3.56116E-06,3.39767E-06,3.24138E-06,3.09198E-06,2.94918E-06,2.81271E-06,2.6823E-06,2.55768E-06,2.43862E-06,2.32488E-06,2.21623E-06,2.11245E-06,2.01334E-06,1.9187E-06,1.82833E-06,1.74205E-06,1.65968E-06,1.58105E-06,1.506E-06,1.43437E-06,1.36603E-06,1.30081E-06,1.23858E-06,1.17922E-06,1.1226E-06,1.06859E-06,1.01708E-06,9.67965E-07,9.2113E-07,8.76476E-07,8.33907E-07,7.93328E-07,7.54651E-07,7.17791E-07,6.82665E-07,6.49196E-07,6.17307E-07,5.86929E-07,5.57991E-07,5.30429E-07,5.0418E-07,4.79183E-07,4.55382E-07,4.32721E-07,4.11148E-07,3.90613E-07,3.71067E-07,3.52466E-07,3.34765E-07,3.17921E-07,3.01896E-07]})

@st.cache_resource
def get_exif_data(image_path):
    image = Image.open(image_path)
    exif_data = image._getexif()
    if not exif_data:
        return None

    exif = {}
    for tag, value in exif_data.items():
        decoded = TAGS.get(tag, tag)
        if decoded == "GPSInfo":
            gps_data = {}
            for t in value:
                sub_decoded = GPSTAGS.get(t, t)
                gps_data[sub_decoded] = value[t]
            exif[decoded] = gps_data
        else:
            exif[decoded] = value
    return exif

@st.cache_resource
def get_lat_lon(exif_data):
    if "GPSInfo" not in exif_data:
        return None, None

    gps_info = exif_data["GPSInfo"]
    gps_latitude = gps_info.get("GPSLatitude")
    gps_latitude_ref = gps_info.get("GPSLatitudeRef")
    gps_longitude = gps_info.get("GPSLongitude")
    gps_longitude_ref = gps_info.get("GPSLongitudeRef")

    lat = convert_to_degrees(gps_latitude)
    if gps_latitude_ref != "N":
        lat = -lat

    lon = convert_to_degrees(gps_longitude)
    if gps_longitude_ref != "E":
        lon = -lon

    return lat, lon

@st.cache_resource
def convert_to_degrees(value):
    d = float(value[0])
    m = float(value[1])
    s = float(value[2])
    return d + (m / 60.0) + (s / 3600.0)

@st.cache_resource
def save_frames(video_path, output_dir, step=30, ext='jpg'):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    cap = cv2.VideoCapture(video_path)
    frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

    for i in range(frame_count):
        ret, frame = cap.read()
        if not ret:
            break
        if i % step == 0:
            frame_filename = os.path.join(output_dir, f'frame_{i:04d}.{ext}')
            cv2.imwrite(frame_filename, frame)
    cap.release()

@st.cache_resource
def calculate_offset_coordinates(lat, lon, angle, distance):
    """
    指定した緯度経度 (lat, lon) から、方位角 (angle) と距離 (distance) に基づいて新しい座標を計算する。

    Args:
        lat (float): 元の緯度（度）
        lon (float): 元の経度（度）
        angle (float): 進行方向の方位角（度）
        distance (float): 移動距離（メートル）

    Returns:
        dict: 新しい座標 {'latitude': 新しい緯度, 'longitude': 新しい経度}
    """

    # 地球の半径（メートル単位）
    earth_radius = 6378137

    # 角度をラジアンに変換
    lat_rad = math.radians(lat)
    lon_rad = math.radians(lon)
    angle_rad = math.radians(angle)

    # 新しい緯度を計算
    new_lat_rad = math.asin(
        math.sin(lat_rad) * math.cos(distance / earth_radius) +
        math.cos(lat_rad) * math.sin(distance / earth_radius) * math.cos(angle_rad)
    )

    # 新しい経度を計算
    new_lon_rad = lon_rad + math.atan2(
        math.sin(angle_rad) * math.sin(distance / earth_radius) * math.cos(lat_rad),
        math.cos(distance / earth_radius) - math.sin(lat_rad) * math.sin(new_lat_rad)
    )

    # ラジアンを度に変換
    new_lat = math.degrees(new_lat_rad)
    new_lon = math.degrees(new_lon_rad)

    return new_lat, new_lon

@st.cache_resource
def calculate_bearing(lat1, lon1, lat2, lon2):
    """
    2点の緯度経度から方位角（北を0°とし、時計回りの角度）を計算する
    """
    # ラジアンに変換
    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])
    
    # 差分計算
    delta_lon = lon2 - lon1
    
    # 方位角計算
    x = math.sin(delta_lon) * math.cos(lat2)
    y = math.cos(lat1) * math.sin(lat2) - (math.sin(lat1) * math.cos(lat2) * math.cos(delta_lon))
    
    initial_bearing = math.atan2(x, y)
    
    # 度に変換し、0°〜360°の範囲に調整
    bearing = (math.degrees(initial_bearing) + 360) % 360
    return bearing

@st.cache_resource
def green_aspara(zip_path):

    extract_folder = "extracted_images"
    output_zip_path = "processed_images.zip"
    processed_folder = "processed_images"

    # ZIPファイルを解凍
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_folder)
    # 出力フォルダを作成

    os.makedirs(processed_folder, exist_ok=True)

    # サブフォルダも含めて全ての画像を取得
    image_files = [
            os.path.join(root, file)
            for root, _, files in os.walk(extract_folder)
            for file in files
            if file.lower().endswith(('.png', '.jpg', '.jpeg'))
        ]
    
    df=pd.DataFrame({"x":[0,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.2,0.21,0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29,0.3,0.31,0.32,0.33,0.34,0.35,0.36,0.37,0.38,0.39,0.4,0.41,0.42,0.43,0.44,0.45,0.46,0.47,0.48,0.49,0.5,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,0.6,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,0.7,0.71,0.72,0.73,0.74,0.75,0.76,0.77,0.78,0.79,0.8,0.81,0.82,0.83,0.84,0.85,0.86,0.87,0.88,0.89,0.9,0.91,0.92,0.93,0.94,0.95,0.96,0.97,0.98,0.99,1,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.2,1.21,1.22,1.23,1.24,1.25,1.26,1.27,1.28,1.29,1.3,1.31,1.32,1.33,1.34,1.35,1.36,1.37,1.38,1.39,1.4,1.41,1.42,1.43,1.44,1.45,1.46,1.47,1.48,1.49,1.5,1.51,1.52,1.53,1.54,1.55,1.56,1.57,1.58,1.59,1.6,1.61,1.62,1.63,1.64,1.65,1.66,1.67,1.68,1.69,1.7,1.71,1.72,1.73,1.74,1.75,1.76,1.77,1.78,1.79,1.8,1.81,1.82,1.83,1.84,1.85,1.86,1.87,1.88,1.89,1.9,1.91,1.92,1.93,1.94,1.95,1.96,1.97,1.98,1.99,2,2.01,2.02,2.03,2.04,2.05,2.06,2.07,2.08,2.09,2.1,2.11,2.12,2.13,2.14,2.15,2.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,2.33,2.34,2.35,2.36,2.37,2.38,2.39,2.4,2.41,2.42,2.43,2.44,2.45,2.46,2.47,2.48,2.49,2.5,2.51,2.52,2.53,2.54,2.55,2.56,2.57,2.58,2.59,2.6,2.61,2.62,2.63,2.64,2.65,2.66,2.67,2.68,2.69,2.7,2.71,2.72,2.73,2.74,2.75,2.76,2.77,2.78,2.79,2.8,2.81,2.82,2.83,2.84,2.85,2.86,2.87,2.88,2.89,2.9,2.91,2.92,2.93,2.94,2.95,2.96,2.97,2.98,2.99,3,3.01,3.02,3.03,3.04,3.05,3.06,3.07,3.08,3.09,3.1,3.11,3.12,3.13,3.14,3.15,3.16,3.17,3.18,3.19,3.2,3.21,3.22,3.23,3.24,3.25,3.26,3.27,3.28,3.29,3.3,3.31,3.32,3.33,3.34,3.35,3.36,3.37,3.38,3.39,3.4,3.41,3.42,3.43,3.44,3.45,3.46,3.47,3.48,3.49,3.5,3.51,3.52,3.53,3.54,3.55,3.56,3.57,3.58,3.59,3.6,3.61,3.62,3.63,3.64,3.65,3.66,3.67,3.68,3.69,3.7,3.71,3.72,3.73,3.74,3.75,3.76,3.77,3.78,3.79,3.8,3.81,3.82,3.83,3.84,3.85,3.86,3.87,3.88,3.89,3.9,3.91,3.92,3.93,3.94,3.95,3.96,3.97,3.98,3.99,4,4.01,4.02,4.03,4.04,4.05,4.06,4.07,4.08,4.09,4.1,4.11,4.12,4.13,4.14,4.15,4.16,4.17,4.18,4.19,4.2,4.21,4.22,4.23,4.24,4.25,4.26,4.27,4.28,4.29,4.3,4.31,4.32,4.33,4.34,4.35,4.36,4.37,4.38,4.39,4.4,4.41,4.42,4.43,4.44,4.45,4.46,4.47,4.48,4.49,4.5,4.51,4.52,4.53,4.54,4.55,4.56,4.57,4.58,4.59,4.6,4.61,4.62,4.63,4.64,4.65,4.66,4.67,4.68,4.69,4.7,4.71,4.72,4.73,4.74,4.75,4.76,4.77,4.78,4.79,4.8,4.81,4.82,4.83,4.84,4.85,4.86,4.87,4.88,4.89,4.9,4.91,4.92,4.93,4.94,4.95,4.96,4.97,4.98,4.99],
    "y":[0.5,0.496010644,0.492021686,0.488033527,0.484046563,0.480061194,0.476077817,0.47209683,0.468118628,0.464143607,0.460172163,0.456204687,0.452241574,0.448283213,0.444329995,0.440382308,0.436440537,0.432505068,0.428576284,0.424654565,0.420740291,0.416833837,0.412935577,0.409045885,0.405165128,0.401293674,0.397431887,0.393580127,0.389738752,0.385908119,0.382088578,0.378280478,0.374484165,0.370699981,0.366928264,0.363169349,0.359423567,0.355691245,0.351972708,0.348268273,0.344578258,0.340902974,0.337242727,0.333597821,0.329968554,0.32635522,0.32275811,0.319177509,0.315613697,0.312066949,0.308537539,0.305025731,0.301531788,0.298055965,0.294598516,0.291159687,0.287739719,0.284338849,0.280957309,0.277595325,0.274253118,0.270930904,0.267628893,0.264347292,0.2610863,0.257846111,0.254626915,0.251428895,0.24825223,0.245097094,0.241963652,0.238852068,0.235762498,0.232695092,0.229649997,0.226627352,0.223627292,0.220649946,0.217695438,0.214763884,0.211855399,0.208970088,0.206108054,0.203269392,0.200454193,0.197662543,0.194894521,0.192150202,0.189429655,0.186732943,0.184060125,0.181411255,0.17878638,0.176185542,0.17360878,0.171056126,0.168527607,0.166023246,0.163543059,0.16108706,0.158655254,0.156247645,0.15386423,0.151505003,0.14916995,0.146859056,0.1445723,0.142309654,0.14007109,0.137856572,0.135666061,0.133499513,0.131356881,0.129238112,0.127143151,0.125071936,0.123024403,0.121000484,0.119000107,0.117023196,0.11506967,0.113139446,0.111232437,0.109348552,0.107487697,0.105649774,0.103834681,0.102042315,0.100272568,0.098525329,0.096800485,0.095097918,0.093417509,0.091759136,0.090122672,0.088507991,0.086914962,0.085343451,0.083793322,0.082264439,0.080756659,0.079269841,0.077803841,0.07635851,0.0749337,0.07352926,0.072145037,0.070780877,0.069436623,0.068112118,0.066807201,0.065521712,0.064255488,0.063008364,0.061780177,0.060570758,0.059379941,0.058207556,0.057053433,0.055917403,0.054799292,0.053698928,0.052616138,0.051550748,0.050502583,0.049471468,0.048457226,0.047459682,0.046478658,0.045513977,0.044565463,0.043632937,0.042716221,0.041815138,0.040929509,0.040059157,0.039203903,0.03836357,0.03753798,0.036726956,0.035930319,0.035147894,0.034379502,0.033624969,0.032884119,0.032156775,0.031442763,0.030741909,0.030054039,0.02937898,0.02871656,0.028066607,0.02742895,0.026803419,0.026189845,0.02558806,0.024997895,0.024419185,0.023851764,0.023295468,0.022750132,0.022215594,0.021691694,0.02117827,0.020675163,0.020182215,0.01969927,0.019226172,0.018762766,0.0183089,0.017864421,0.017429178,0.017003023,0.016585807,0.016177383,0.015777607,0.015386335,0.015003423,0.014628731,0.014262118,0.013903448,0.013552581,0.013209384,0.012873721,0.012545461,0.012224473,0.011910625,0.011603792,0.011303844,0.011010658,0.01072411,0.010444077,0.010170439,0.009903076,0.00964187,0.009386706,0.009137468,0.008894043,0.008656319,0.008424186,0.008197536,0.00797626,0.007760254,0.007549411,0.007343631,0.007142811,0.006946851,0.006755653,0.006569119,0.006387155,0.006209665,0.006036558,0.005867742,0.005703126,0.005542623,0.005386146,0.005233608,0.005084926,0.004940016,0.004798797,0.004661188,0.004527111,0.004396488,0.004269243,0.004145301,0.004024589,0.003907033,0.003792562,0.003681108,0.003572601,0.003466974,0.00336416,0.003264096,0.003166716,0.003071959,0.002979763,0.002890068,0.002802815,0.002717945,0.002635402,0.00255513,0.002477075,0.002401182,0.0023274,0.002255677,0.002185961,0.002118205,0.002052359,0.001988376,0.001926209,0.001865813,0.001807144,0.001750157,0.00169481,0.001641061,0.00158887,0.001538195,0.001488999,0.001441242,0.001394887,0.001349898,0.001306238,0.001263873,0.001222769,0.001182891,0.001144207,0.001106685,0.001070294,0.001035003,0.001000782,0.000967603,0.000935437,0.000904255,0.000874032,0.000844739,0.000816352,0.000788846,0.000762195,0.000736375,0.000711364,0.000687138,0.000663675,0.000640953,0.000618951,0.000597648,0.000577025,0.000557061,0.000537737,0.000519035,0.000500937,0.000483424,0.00046648,0.000450087,0.00043423,0.000418892,0.000404058,0.000389712,0.000375841,0.000362429,0.000349463,0.000336929,0.000324814,0.000313106,0.000301791,0.000290857,0.000280293,0.000270088,0.000260229,0.000250707,0.00024151,0.000232629,0.000224053,0.000215773,0.00020778,0.000200064,0.000192616,0.000185427,0.000178491,0.000171797,0.000165339,0.000159109,0.000153099,0.000147302,0.000141711,0.000136319,0.00013112,0.000126108,0.000121275,0.000116617,0.000112127,0.0001078,0.00010363,9.96114E-05,9.57399E-05,9.20101E-05,8.84173E-05,8.49567E-05,8.16238E-05,7.84142E-05,7.53236E-05,7.2348E-05,6.94834E-05,6.67258E-05,6.40716E-05,6.15172E-05,5.90589E-05,5.66935E-05,5.44177E-05,5.22282E-05,5.01221E-05,4.80963E-05,4.61481E-05,4.42745E-05,4.24729E-05,4.07408E-05,3.90756E-05,3.74749E-05,3.59363E-05,3.44576E-05,3.30366E-05,3.16712E-05,3.03594E-05,2.90991E-05,2.78884E-05,2.67256E-05,2.56088E-05,2.45364E-05,2.35066E-05,2.25179E-05,2.15687E-05,2.06575E-05,1.9783E-05,1.89436E-05,1.81382E-05,1.73653E-05,1.66238E-05,1.59124E-05,1.523E-05,1.45755E-05,1.39477E-05,1.33457E-05,1.27685E-05,1.22151E-05,1.16846E-05,1.1176E-05,1.06885E-05,1.02213E-05,9.77365E-06,9.34467E-06,8.93366E-06,8.53991E-06,8.16273E-06,7.80146E-06,7.45547E-06,7.12414E-06,6.80688E-06,6.50312E-06,6.21233E-06,5.93397E-06,5.66753E-06,5.41254E-06,5.16853E-06,4.93505E-06,4.71165E-06,4.49794E-06,4.29351E-06,4.09798E-06,3.91098E-06,3.73215E-06,3.56116E-06,3.39767E-06,3.24138E-06,3.09198E-06,2.94918E-06,2.81271E-06,2.6823E-06,2.55768E-06,2.43862E-06,2.32488E-06,2.21623E-06,2.11245E-06,2.01334E-06,1.9187E-06,1.82833E-06,1.74205E-06,1.65968E-06,1.58105E-06,1.506E-06,1.43437E-06,1.36603E-06,1.30081E-06,1.23858E-06,1.17922E-06,1.1226E-06,1.06859E-06,1.01708E-06,9.67965E-07,9.2113E-07,8.76476E-07,8.33907E-07,7.93328E-07,7.54651E-07,7.17791E-07,6.82665E-07,6.49196E-07,6.17307E-07,5.86929E-07,5.57991E-07,5.30429E-07,5.0418E-07,4.79183E-07,4.55382E-07,4.32721E-07,4.11148E-07,3.90613E-07,3.71067E-07,3.52466E-07,3.34765E-07,3.17921E-07,3.01896E-07]})
    metadata_list = []

    #初期値
    lat = 36
    lon = 140

    for q,c in enumerate(image_files):
        past_lat = lat
        past_lon = lon

        print(c)
        im = cv2.imread(c)
        image_path = c
        exif_data = get_exif_data(image_path)
        lat, lon = get_lat_lon(exif_data)
        print(f"Latitude: {lat}, Longitude: {lon}")

        bearing = calculate_bearing(past_lat,past_lon,lat,lon)

        #がれき

        im_DI = 200*((im[:, :, 2] - im[:, :, 1] )/(0.299 * im[:, :, 2] + 0.298 * im[:, :, 1]))

    # im_DI = 200*((im[:, :, 2] )/(im[:, :, 2] + im[:, :, 1] + im[:, :, 0]))
    # im_DI2 = 200*(im2[:, :, 2])/(im2[:, :, 2] + im2[:, :, 1] + im2[:, :, 0])


        varlist = []
        ave1 = 129.08210696919892
        std1 = 258.3910900702745

        print(ave1, std1)
        
        vv = 0.1

        # 変更後の色
        change_color = (0, 0, 255)

        # 画像の縦横
        h, w = im.shape[:2]

        a = 0
        ar = 0
        bcount = 0

        # 色の変更
        color_list_right = []
        color_list_left = []
        color_gray_right = []
        color_gray_left = []

        for i in range(h//2, h):
            for j in range(w//2):
                b, g, r = im[i, j]
                if ave1 - std1 * vv <= 200*((r - g)/(0.299 * r  + 0.298 * g)) <= ave1 + std1 * vv:
                    color_list_left.append(200*((r - g)/(0.299 * r + 0.298 * g)))
                    color_gray_left.append((0.299 * r + 0.298 * b))
                    im[i, j] = change_color
                    a += 1
                else:
                    im[i, j] = (b, g, r)

        for i in range(h//2+1,h):
            for j in range(w//2+1,w):
                b, g, r = im[i, j]
                if ave1 - std1 * vv <= 200*((r - g)/(0.299 * r + 0.298 * g)) <= ave1 + std1 * vv :
                    color_list_right.append(200*((r - g)/(0.299 * r + 0.298 * g)))
                    color_gray_left.append((0.299 * r + 0.298 * b))
                    im[i, j] = change_color
                    ar += 1
                else:
                    im[i, j] = (b, g, r)

        # グレースケールに変換
        red = im[:, :, 2]
        # 二値化
        ret, thresh = cv2.threshold(red, 254, 255, 0)
        # 輪郭検出
        contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        # 面積計算
        sorted_contours = sorted(contours, key=cv2.contourArea, reverse=True)


        #for p in range(len(contours)):
        for p in range(0):
            area = cv2.contourArea(sorted_contours[p])
            M = cv2.moments(sorted_contours[p])
            if M["m00"] != 0:
                cx = int(M["m10"] / M["m00"])
                cy = int(M["m01"] / M["m00"])  
            else:
                continue
            print('Area', p+1, ':', area)
            cv2.putText(im, str(area),(cx, cy),cv2.FONT_HERSHEY_PLAIN,
                        1,(255,0,0),2,cv2.LINE_AA)

        print(im_DI)
        
        value = round(a/(h*w*0.25),3)
        value2 = round(ar/(h*w*0.25),3)
        value3 = np.std(color_gray_left)
        value4 = np.std(color_gray_right)

        print(sum(color_list_left, color_list_right))

        if len(color_list_left) > 1:
            #varleft = statistics.pvariance(color_list_left)
            #varleft = np.var(color_list_left)
            varleft = np.std(color_list_left)
        else:
            varleft = 0

        if len(color_list_right) > 1:
            #varright = statistics.pvariance(color_list_right)
            #varright = np.var(color_list_right)
            varright = np.std(color_list_right)
        else:
            varright = 0

        #value = round(sum(color_list)/len(color_list)+1,3)
        #value2 = round(np.std(color_list_left),3)
        #value3 = round(np.mean(color_list))
        #value4 = sum(color_list2)
        f = open('log15.txt', 'a')
        v = vv
        print(1-2*df["y"][v*100], value,value2)
        if (value >= 1-2*df["y"][v*100]) or (value2 >= 1-2*df["y"][v*100]):
            f.write(str(c)+ "," + str(value)+ "," + str(value2)+","+str(varleft)+","+str(varright)+",Damaged,"+str(lat)+","+str(lon)+'\n')
        else:
            f.write(str(c)+ "," + str(value)+ "," + str(value2)+","+str(varleft)+","+str(varright)+", Not Damaged,"+str(lat)+","+str(lon)+'\n')
        #f.write(str(c)+ " " + str(value)+ " " + str(value2) +'\n')
        f.close()

        new_lat, new_lon = calculate_offset_coordinates(lat,lon,bearing-45,10)
        new_lat2, new_lon2 = calculate_offset_coordinates(lat,lon,bearing+45,10)

        metadata = {
                        "image_id": "なし",
                        "currentLongitude": new_lon,
                        "currentLatitude": new_lat,
                        "compass_angle": bearing,
                        "captured_at": "なし",  # 撮影日時を追加
                        "image_url": "なし",
                        "AreaRate": value
                    }
        metadata_list.append(metadata)

        metadata = {
                        "image_id": "なし",
                        "currentLongitude": new_lon2,
                        "currentLatitude": new_lat2,
                        "compass_angle": bearing,
                        "captured_at": "なし",  # 撮影日時を追加
                        "image_url": "なし",
                        "AreaRate": value2
                    }
        
        metadata_list.append(metadata)

        # (225, 400)

        print(im_DI.dtype)
        # uint8

        cv2.putText(im,
                    text=str(value),
                    org=(w//3, h//3),
                    fontFace=cv2.FONT_HERSHEY_SIMPLEX,
                    fontScale=1.0,
                    color=(0, 255, 0),
                    thickness=2,
                    lineType=cv2.LINE_4)
        
        cv2.putText(im,
                    text=str(value2),
                    org=(2*w//3, h//3),
                    fontFace=cv2.FONT_HERSHEY_SIMPLEX,
                    fontScale=1.0,
                    color=(0, 255, 0),
                    thickness=2,
                    lineType=cv2.LINE_4)
        
        if (value >= 1-2*df["y"][v*100]) or (value2 >= 1-2*df["y"][v*100]):
            cv2.putText(im,
                        text="Damaged",
                        org=(w//2, h*2//3),
                        fontFace=cv2.FONT_HERSHEY_SIMPLEX,
                        fontScale=1.0,
                        color=(0, 0, 255),
                        thickness=2,
                        lineType=cv2.LINE_4)
        else:
            cv2.putText(im,
                        text="Not Damaged",
                        org=(w//2, h*2//3),
                        fontFace=cv2.FONT_HERSHEY_SIMPLEX,
                        fontScale=1.0,
                        color=(0, 255, 0),
                        thickness=2,
                        lineType=cv2.LINE_4)
        processed_image_path = os.path.join(processed_folder, c)
        cv2.imwrite(processed_image_path, im)

        # ZIPファイルを作成
    with zipfile.ZipFile(output_zip_path, 'w', zipfile.ZIP_DEFLATED) as zip_out:
        for file in os.listdir(processed_folder):
            file_path = os.path.join(processed_folder, file)
            zip_out.write(file_path, arcname=file)  # ZIPに追加

    # ZIPファイルの読み込み
    with open(output_zip_path, "rb") as f:
            zip_bytes = f.read()

    
    return zip_bytes, metadata_list

@st.cache_resource
def convert_RI360(im, lat, lon, heading):
    a = 0
    ar = 0
    # BGR → RGB に変換
    # OpenCV でデコード（画像を読み込む）
    im = cv2.imdecode(im, cv2.IMREAD_COLOR)
    #im = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)

    df=pd.DataFrame({"x":[0,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.2,0.21,0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29,0.3,0.31,0.32,0.33,0.34,0.35,0.36,0.37,0.38,0.39,0.4,0.41,0.42,0.43,0.44,0.45,0.46,0.47,0.48,0.49,0.5,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,0.6,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,0.7,0.71,0.72,0.73,0.74,0.75,0.76,0.77,0.78,0.79,0.8,0.81,0.82,0.83,0.84,0.85,0.86,0.87,0.88,0.89,0.9,0.91,0.92,0.93,0.94,0.95,0.96,0.97,0.98,0.99,1,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.2,1.21,1.22,1.23,1.24,1.25,1.26,1.27,1.28,1.29,1.3,1.31,1.32,1.33,1.34,1.35,1.36,1.37,1.38,1.39,1.4,1.41,1.42,1.43,1.44,1.45,1.46,1.47,1.48,1.49,1.5,1.51,1.52,1.53,1.54,1.55,1.56,1.57,1.58,1.59,1.6,1.61,1.62,1.63,1.64,1.65,1.66,1.67,1.68,1.69,1.7,1.71,1.72,1.73,1.74,1.75,1.76,1.77,1.78,1.79,1.8,1.81,1.82,1.83,1.84,1.85,1.86,1.87,1.88,1.89,1.9,1.91,1.92,1.93,1.94,1.95,1.96,1.97,1.98,1.99,2,2.01,2.02,2.03,2.04,2.05,2.06,2.07,2.08,2.09,2.1,2.11,2.12,2.13,2.14,2.15,2.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,2.33,2.34,2.35,2.36,2.37,2.38,2.39,2.4,2.41,2.42,2.43,2.44,2.45,2.46,2.47,2.48,2.49,2.5,2.51,2.52,2.53,2.54,2.55,2.56,2.57,2.58,2.59,2.6,2.61,2.62,2.63,2.64,2.65,2.66,2.67,2.68,2.69,2.7,2.71,2.72,2.73,2.74,2.75,2.76,2.77,2.78,2.79,2.8,2.81,2.82,2.83,2.84,2.85,2.86,2.87,2.88,2.89,2.9,2.91,2.92,2.93,2.94,2.95,2.96,2.97,2.98,2.99,3,3.01,3.02,3.03,3.04,3.05,3.06,3.07,3.08,3.09,3.1,3.11,3.12,3.13,3.14,3.15,3.16,3.17,3.18,3.19,3.2,3.21,3.22,3.23,3.24,3.25,3.26,3.27,3.28,3.29,3.3,3.31,3.32,3.33,3.34,3.35,3.36,3.37,3.38,3.39,3.4,3.41,3.42,3.43,3.44,3.45,3.46,3.47,3.48,3.49,3.5,3.51,3.52,3.53,3.54,3.55,3.56,3.57,3.58,3.59,3.6,3.61,3.62,3.63,3.64,3.65,3.66,3.67,3.68,3.69,3.7,3.71,3.72,3.73,3.74,3.75,3.76,3.77,3.78,3.79,3.8,3.81,3.82,3.83,3.84,3.85,3.86,3.87,3.88,3.89,3.9,3.91,3.92,3.93,3.94,3.95,3.96,3.97,3.98,3.99,4,4.01,4.02,4.03,4.04,4.05,4.06,4.07,4.08,4.09,4.1,4.11,4.12,4.13,4.14,4.15,4.16,4.17,4.18,4.19,4.2,4.21,4.22,4.23,4.24,4.25,4.26,4.27,4.28,4.29,4.3,4.31,4.32,4.33,4.34,4.35,4.36,4.37,4.38,4.39,4.4,4.41,4.42,4.43,4.44,4.45,4.46,4.47,4.48,4.49,4.5,4.51,4.52,4.53,4.54,4.55,4.56,4.57,4.58,4.59,4.6,4.61,4.62,4.63,4.64,4.65,4.66,4.67,4.68,4.69,4.7,4.71,4.72,4.73,4.74,4.75,4.76,4.77,4.78,4.79,4.8,4.81,4.82,4.83,4.84,4.85,4.86,4.87,4.88,4.89,4.9,4.91,4.92,4.93,4.94,4.95,4.96,4.97,4.98,4.99],
    "y":[0.5,0.496010644,0.492021686,0.488033527,0.484046563,0.480061194,0.476077817,0.47209683,0.468118628,0.464143607,0.460172163,0.456204687,0.452241574,0.448283213,0.444329995,0.440382308,0.436440537,0.432505068,0.428576284,0.424654565,0.420740291,0.416833837,0.412935577,0.409045885,0.405165128,0.401293674,0.397431887,0.393580127,0.389738752,0.385908119,0.382088578,0.378280478,0.374484165,0.370699981,0.366928264,0.363169349,0.359423567,0.355691245,0.351972708,0.348268273,0.344578258,0.340902974,0.337242727,0.333597821,0.329968554,0.32635522,0.32275811,0.319177509,0.315613697,0.312066949,0.308537539,0.305025731,0.301531788,0.298055965,0.294598516,0.291159687,0.287739719,0.284338849,0.280957309,0.277595325,0.274253118,0.270930904,0.267628893,0.264347292,0.2610863,0.257846111,0.254626915,0.251428895,0.24825223,0.245097094,0.241963652,0.238852068,0.235762498,0.232695092,0.229649997,0.226627352,0.223627292,0.220649946,0.217695438,0.214763884,0.211855399,0.208970088,0.206108054,0.203269392,0.200454193,0.197662543,0.194894521,0.192150202,0.189429655,0.186732943,0.184060125,0.181411255,0.17878638,0.176185542,0.17360878,0.171056126,0.168527607,0.166023246,0.163543059,0.16108706,0.158655254,0.156247645,0.15386423,0.151505003,0.14916995,0.146859056,0.1445723,0.142309654,0.14007109,0.137856572,0.135666061,0.133499513,0.131356881,0.129238112,0.127143151,0.125071936,0.123024403,0.121000484,0.119000107,0.117023196,0.11506967,0.113139446,0.111232437,0.109348552,0.107487697,0.105649774,0.103834681,0.102042315,0.100272568,0.098525329,0.096800485,0.095097918,0.093417509,0.091759136,0.090122672,0.088507991,0.086914962,0.085343451,0.083793322,0.082264439,0.080756659,0.079269841,0.077803841,0.07635851,0.0749337,0.07352926,0.072145037,0.070780877,0.069436623,0.068112118,0.066807201,0.065521712,0.064255488,0.063008364,0.061780177,0.060570758,0.059379941,0.058207556,0.057053433,0.055917403,0.054799292,0.053698928,0.052616138,0.051550748,0.050502583,0.049471468,0.048457226,0.047459682,0.046478658,0.045513977,0.044565463,0.043632937,0.042716221,0.041815138,0.040929509,0.040059157,0.039203903,0.03836357,0.03753798,0.036726956,0.035930319,0.035147894,0.034379502,0.033624969,0.032884119,0.032156775,0.031442763,0.030741909,0.030054039,0.02937898,0.02871656,0.028066607,0.02742895,0.026803419,0.026189845,0.02558806,0.024997895,0.024419185,0.023851764,0.023295468,0.022750132,0.022215594,0.021691694,0.02117827,0.020675163,0.020182215,0.01969927,0.019226172,0.018762766,0.0183089,0.017864421,0.017429178,0.017003023,0.016585807,0.016177383,0.015777607,0.015386335,0.015003423,0.014628731,0.014262118,0.013903448,0.013552581,0.013209384,0.012873721,0.012545461,0.012224473,0.011910625,0.011603792,0.011303844,0.011010658,0.01072411,0.010444077,0.010170439,0.009903076,0.00964187,0.009386706,0.009137468,0.008894043,0.008656319,0.008424186,0.008197536,0.00797626,0.007760254,0.007549411,0.007343631,0.007142811,0.006946851,0.006755653,0.006569119,0.006387155,0.006209665,0.006036558,0.005867742,0.005703126,0.005542623,0.005386146,0.005233608,0.005084926,0.004940016,0.004798797,0.004661188,0.004527111,0.004396488,0.004269243,0.004145301,0.004024589,0.003907033,0.003792562,0.003681108,0.003572601,0.003466974,0.00336416,0.003264096,0.003166716,0.003071959,0.002979763,0.002890068,0.002802815,0.002717945,0.002635402,0.00255513,0.002477075,0.002401182,0.0023274,0.002255677,0.002185961,0.002118205,0.002052359,0.001988376,0.001926209,0.001865813,0.001807144,0.001750157,0.00169481,0.001641061,0.00158887,0.001538195,0.001488999,0.001441242,0.001394887,0.001349898,0.001306238,0.001263873,0.001222769,0.001182891,0.001144207,0.001106685,0.001070294,0.001035003,0.001000782,0.000967603,0.000935437,0.000904255,0.000874032,0.000844739,0.000816352,0.000788846,0.000762195,0.000736375,0.000711364,0.000687138,0.000663675,0.000640953,0.000618951,0.000597648,0.000577025,0.000557061,0.000537737,0.000519035,0.000500937,0.000483424,0.00046648,0.000450087,0.00043423,0.000418892,0.000404058,0.000389712,0.000375841,0.000362429,0.000349463,0.000336929,0.000324814,0.000313106,0.000301791,0.000290857,0.000280293,0.000270088,0.000260229,0.000250707,0.00024151,0.000232629,0.000224053,0.000215773,0.00020778,0.000200064,0.000192616,0.000185427,0.000178491,0.000171797,0.000165339,0.000159109,0.000153099,0.000147302,0.000141711,0.000136319,0.00013112,0.000126108,0.000121275,0.000116617,0.000112127,0.0001078,0.00010363,9.96114E-05,9.57399E-05,9.20101E-05,8.84173E-05,8.49567E-05,8.16238E-05,7.84142E-05,7.53236E-05,7.2348E-05,6.94834E-05,6.67258E-05,6.40716E-05,6.15172E-05,5.90589E-05,5.66935E-05,5.44177E-05,5.22282E-05,5.01221E-05,4.80963E-05,4.61481E-05,4.42745E-05,4.24729E-05,4.07408E-05,3.90756E-05,3.74749E-05,3.59363E-05,3.44576E-05,3.30366E-05,3.16712E-05,3.03594E-05,2.90991E-05,2.78884E-05,2.67256E-05,2.56088E-05,2.45364E-05,2.35066E-05,2.25179E-05,2.15687E-05,2.06575E-05,1.9783E-05,1.89436E-05,1.81382E-05,1.73653E-05,1.66238E-05,1.59124E-05,1.523E-05,1.45755E-05,1.39477E-05,1.33457E-05,1.27685E-05,1.22151E-05,1.16846E-05,1.1176E-05,1.06885E-05,1.02213E-05,9.77365E-06,9.34467E-06,8.93366E-06,8.53991E-06,8.16273E-06,7.80146E-06,7.45547E-06,7.12414E-06,6.80688E-06,6.50312E-06,6.21233E-06,5.93397E-06,5.66753E-06,5.41254E-06,5.16853E-06,4.93505E-06,4.71165E-06,4.49794E-06,4.29351E-06,4.09798E-06,3.91098E-06,3.73215E-06,3.56116E-06,3.39767E-06,3.24138E-06,3.09198E-06,2.94918E-06,2.81271E-06,2.6823E-06,2.55768E-06,2.43862E-06,2.32488E-06,2.21623E-06,2.11245E-06,2.01334E-06,1.9187E-06,1.82833E-06,1.74205E-06,1.65968E-06,1.58105E-06,1.506E-06,1.43437E-06,1.36603E-06,1.30081E-06,1.23858E-06,1.17922E-06,1.1226E-06,1.06859E-06,1.01708E-06,9.67965E-07,9.2113E-07,8.76476E-07,8.33907E-07,7.93328E-07,7.54651E-07,7.17791E-07,6.82665E-07,6.49196E-07,6.17307E-07,5.86929E-07,5.57991E-07,5.30429E-07,5.0418E-07,4.79183E-07,4.55382E-07,4.32721E-07,4.11148E-07,3.90613E-07,3.71067E-07,3.52466E-07,3.34765E-07,3.17921E-07,3.01896E-07]})
    metadata_list = []

    im_DI = 200*((im[:, :, 2] - im[:, :, 1] )/(0.299 * im[:, :, 2] + 0.298 * im[:, :, 1]))

    # im_DI = 200*((im[:, :, 2] )/(im[:, :, 2] + im[:, :, 1] + im[:, :, 0]))
    # im_DI2 = 200*(im2[:, :, 2])/(im2[:, :, 2] + im2[:, :, 1] + im2[:, :, 0])

    ave1 = 129.08210696919892
    std1 = 258.3910900702745

    vv = 0.1
    change_color = (0, 0, 255)
    h, w = im.shape[:2]

    bcount = 0

        # 色の変更
    color_list_right = []
    color_list_left = []
    color_gray_right = []
    color_gray_left = []


    for i in range(round(h/3), round(h*2/3)):
            for j in range(round(w/2), round(3*w/4)):
                b, g, r = im[i, j]
                if ave1 - std1 * vv <= 200*((r - g)/(0.299 * r  + 0.298 * g)) <= ave1 + std1 * vv:
                    color_list_left.append(200*((r - g)/(0.299 * r + 0.298 * g)))
                    color_gray_left.append((0.299 * r + 0.298 * b))
                    im[i, j] = change_color
                    a += 1
                else:
                    im[i, j] = (b, g, r)

    for i in range(round(h/3), round(h*2/3)):
            for j in range(round(3*w/4+1),w):
                b, g, r = im[i, j]
                if ave1 - std1 * vv <= 200*((r - g)/(0.299 * r + 0.298 * g)) <= ave1 + std1 * vv :
                    color_list_right.append(200*((r - g)/(0.299 * r + 0.298 * g)))
                    color_gray_left.append((0.299 * r + 0.298 * b))
                    im[i, j] = change_color
                    ar += 1
                else:
                    im[i, j] = (b, g, r)

        # グレースケールに変換
    red = im[:, :, 2]
        # 二値化
    ret, thresh = cv2.threshold(red, 254, 255, 0)
        # 輪郭検出
    contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        # 面積計算
    sorted_contours = sorted(contours, key=cv2.contourArea, reverse=True)


        #for p in range(len(contours)):
    for p in range(0):
            area = cv2.contourArea(sorted_contours[p])
            M = cv2.moments(sorted_contours[p])
            if M["m00"] != 0:
                cx = int(M["m10"] / M["m00"])
                cy = int(M["m01"] / M["m00"])  
            else:
                continue
            cv2.putText(im, str(area),(cx, cy),cv2.FONT_HERSHEY_PLAIN,
                        1,(255,0,0),2,cv2.LINE_AA)

    value = round(a/(h*w*0.125*0.33),3)
    value2 = round(ar/(h*w*0.125*0.33),3)

    left_coord = calculate_offset_coordinates(lat,lon,heading-45,10)
    right_coord = calculate_offset_coordinates(lat,lon,heading+45,10)
    print(value,value2,left_coord, right_coord)

    return value, value2, left_coord, right_coord

@st.cache_resource
def convert_RI_normal(im, lat, lon, heading):
    a = 0
    ar = 0
    # BGR → RGB に変換
    # OpenCV でデコード（画像を読み込む）
    im = cv2.imdecode(im, cv2.IMREAD_COLOR)
    #im = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)

    df=pd.DataFrame({"x":[0,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.2,0.21,0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29,0.3,0.31,0.32,0.33,0.34,0.35,0.36,0.37,0.38,0.39,0.4,0.41,0.42,0.43,0.44,0.45,0.46,0.47,0.48,0.49,0.5,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,0.6,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,0.7,0.71,0.72,0.73,0.74,0.75,0.76,0.77,0.78,0.79,0.8,0.81,0.82,0.83,0.84,0.85,0.86,0.87,0.88,0.89,0.9,0.91,0.92,0.93,0.94,0.95,0.96,0.97,0.98,0.99,1,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.2,1.21,1.22,1.23,1.24,1.25,1.26,1.27,1.28,1.29,1.3,1.31,1.32,1.33,1.34,1.35,1.36,1.37,1.38,1.39,1.4,1.41,1.42,1.43,1.44,1.45,1.46,1.47,1.48,1.49,1.5,1.51,1.52,1.53,1.54,1.55,1.56,1.57,1.58,1.59,1.6,1.61,1.62,1.63,1.64,1.65,1.66,1.67,1.68,1.69,1.7,1.71,1.72,1.73,1.74,1.75,1.76,1.77,1.78,1.79,1.8,1.81,1.82,1.83,1.84,1.85,1.86,1.87,1.88,1.89,1.9,1.91,1.92,1.93,1.94,1.95,1.96,1.97,1.98,1.99,2,2.01,2.02,2.03,2.04,2.05,2.06,2.07,2.08,2.09,2.1,2.11,2.12,2.13,2.14,2.15,2.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,2.33,2.34,2.35,2.36,2.37,2.38,2.39,2.4,2.41,2.42,2.43,2.44,2.45,2.46,2.47,2.48,2.49,2.5,2.51,2.52,2.53,2.54,2.55,2.56,2.57,2.58,2.59,2.6,2.61,2.62,2.63,2.64,2.65,2.66,2.67,2.68,2.69,2.7,2.71,2.72,2.73,2.74,2.75,2.76,2.77,2.78,2.79,2.8,2.81,2.82,2.83,2.84,2.85,2.86,2.87,2.88,2.89,2.9,2.91,2.92,2.93,2.94,2.95,2.96,2.97,2.98,2.99,3,3.01,3.02,3.03,3.04,3.05,3.06,3.07,3.08,3.09,3.1,3.11,3.12,3.13,3.14,3.15,3.16,3.17,3.18,3.19,3.2,3.21,3.22,3.23,3.24,3.25,3.26,3.27,3.28,3.29,3.3,3.31,3.32,3.33,3.34,3.35,3.36,3.37,3.38,3.39,3.4,3.41,3.42,3.43,3.44,3.45,3.46,3.47,3.48,3.49,3.5,3.51,3.52,3.53,3.54,3.55,3.56,3.57,3.58,3.59,3.6,3.61,3.62,3.63,3.64,3.65,3.66,3.67,3.68,3.69,3.7,3.71,3.72,3.73,3.74,3.75,3.76,3.77,3.78,3.79,3.8,3.81,3.82,3.83,3.84,3.85,3.86,3.87,3.88,3.89,3.9,3.91,3.92,3.93,3.94,3.95,3.96,3.97,3.98,3.99,4,4.01,4.02,4.03,4.04,4.05,4.06,4.07,4.08,4.09,4.1,4.11,4.12,4.13,4.14,4.15,4.16,4.17,4.18,4.19,4.2,4.21,4.22,4.23,4.24,4.25,4.26,4.27,4.28,4.29,4.3,4.31,4.32,4.33,4.34,4.35,4.36,4.37,4.38,4.39,4.4,4.41,4.42,4.43,4.44,4.45,4.46,4.47,4.48,4.49,4.5,4.51,4.52,4.53,4.54,4.55,4.56,4.57,4.58,4.59,4.6,4.61,4.62,4.63,4.64,4.65,4.66,4.67,4.68,4.69,4.7,4.71,4.72,4.73,4.74,4.75,4.76,4.77,4.78,4.79,4.8,4.81,4.82,4.83,4.84,4.85,4.86,4.87,4.88,4.89,4.9,4.91,4.92,4.93,4.94,4.95,4.96,4.97,4.98,4.99],
    "y":[0.5,0.496010644,0.492021686,0.488033527,0.484046563,0.480061194,0.476077817,0.47209683,0.468118628,0.464143607,0.460172163,0.456204687,0.452241574,0.448283213,0.444329995,0.440382308,0.436440537,0.432505068,0.428576284,0.424654565,0.420740291,0.416833837,0.412935577,0.409045885,0.405165128,0.401293674,0.397431887,0.393580127,0.389738752,0.385908119,0.382088578,0.378280478,0.374484165,0.370699981,0.366928264,0.363169349,0.359423567,0.355691245,0.351972708,0.348268273,0.344578258,0.340902974,0.337242727,0.333597821,0.329968554,0.32635522,0.32275811,0.319177509,0.315613697,0.312066949,0.308537539,0.305025731,0.301531788,0.298055965,0.294598516,0.291159687,0.287739719,0.284338849,0.280957309,0.277595325,0.274253118,0.270930904,0.267628893,0.264347292,0.2610863,0.257846111,0.254626915,0.251428895,0.24825223,0.245097094,0.241963652,0.238852068,0.235762498,0.232695092,0.229649997,0.226627352,0.223627292,0.220649946,0.217695438,0.214763884,0.211855399,0.208970088,0.206108054,0.203269392,0.200454193,0.197662543,0.194894521,0.192150202,0.189429655,0.186732943,0.184060125,0.181411255,0.17878638,0.176185542,0.17360878,0.171056126,0.168527607,0.166023246,0.163543059,0.16108706,0.158655254,0.156247645,0.15386423,0.151505003,0.14916995,0.146859056,0.1445723,0.142309654,0.14007109,0.137856572,0.135666061,0.133499513,0.131356881,0.129238112,0.127143151,0.125071936,0.123024403,0.121000484,0.119000107,0.117023196,0.11506967,0.113139446,0.111232437,0.109348552,0.107487697,0.105649774,0.103834681,0.102042315,0.100272568,0.098525329,0.096800485,0.095097918,0.093417509,0.091759136,0.090122672,0.088507991,0.086914962,0.085343451,0.083793322,0.082264439,0.080756659,0.079269841,0.077803841,0.07635851,0.0749337,0.07352926,0.072145037,0.070780877,0.069436623,0.068112118,0.066807201,0.065521712,0.064255488,0.063008364,0.061780177,0.060570758,0.059379941,0.058207556,0.057053433,0.055917403,0.054799292,0.053698928,0.052616138,0.051550748,0.050502583,0.049471468,0.048457226,0.047459682,0.046478658,0.045513977,0.044565463,0.043632937,0.042716221,0.041815138,0.040929509,0.040059157,0.039203903,0.03836357,0.03753798,0.036726956,0.035930319,0.035147894,0.034379502,0.033624969,0.032884119,0.032156775,0.031442763,0.030741909,0.030054039,0.02937898,0.02871656,0.028066607,0.02742895,0.026803419,0.026189845,0.02558806,0.024997895,0.024419185,0.023851764,0.023295468,0.022750132,0.022215594,0.021691694,0.02117827,0.020675163,0.020182215,0.01969927,0.019226172,0.018762766,0.0183089,0.017864421,0.017429178,0.017003023,0.016585807,0.016177383,0.015777607,0.015386335,0.015003423,0.014628731,0.014262118,0.013903448,0.013552581,0.013209384,0.012873721,0.012545461,0.012224473,0.011910625,0.011603792,0.011303844,0.011010658,0.01072411,0.010444077,0.010170439,0.009903076,0.00964187,0.009386706,0.009137468,0.008894043,0.008656319,0.008424186,0.008197536,0.00797626,0.007760254,0.007549411,0.007343631,0.007142811,0.006946851,0.006755653,0.006569119,0.006387155,0.006209665,0.006036558,0.005867742,0.005703126,0.005542623,0.005386146,0.005233608,0.005084926,0.004940016,0.004798797,0.004661188,0.004527111,0.004396488,0.004269243,0.004145301,0.004024589,0.003907033,0.003792562,0.003681108,0.003572601,0.003466974,0.00336416,0.003264096,0.003166716,0.003071959,0.002979763,0.002890068,0.002802815,0.002717945,0.002635402,0.00255513,0.002477075,0.002401182,0.0023274,0.002255677,0.002185961,0.002118205,0.002052359,0.001988376,0.001926209,0.001865813,0.001807144,0.001750157,0.00169481,0.001641061,0.00158887,0.001538195,0.001488999,0.001441242,0.001394887,0.001349898,0.001306238,0.001263873,0.001222769,0.001182891,0.001144207,0.001106685,0.001070294,0.001035003,0.001000782,0.000967603,0.000935437,0.000904255,0.000874032,0.000844739,0.000816352,0.000788846,0.000762195,0.000736375,0.000711364,0.000687138,0.000663675,0.000640953,0.000618951,0.000597648,0.000577025,0.000557061,0.000537737,0.000519035,0.000500937,0.000483424,0.00046648,0.000450087,0.00043423,0.000418892,0.000404058,0.000389712,0.000375841,0.000362429,0.000349463,0.000336929,0.000324814,0.000313106,0.000301791,0.000290857,0.000280293,0.000270088,0.000260229,0.000250707,0.00024151,0.000232629,0.000224053,0.000215773,0.00020778,0.000200064,0.000192616,0.000185427,0.000178491,0.000171797,0.000165339,0.000159109,0.000153099,0.000147302,0.000141711,0.000136319,0.00013112,0.000126108,0.000121275,0.000116617,0.000112127,0.0001078,0.00010363,9.96114E-05,9.57399E-05,9.20101E-05,8.84173E-05,8.49567E-05,8.16238E-05,7.84142E-05,7.53236E-05,7.2348E-05,6.94834E-05,6.67258E-05,6.40716E-05,6.15172E-05,5.90589E-05,5.66935E-05,5.44177E-05,5.22282E-05,5.01221E-05,4.80963E-05,4.61481E-05,4.42745E-05,4.24729E-05,4.07408E-05,3.90756E-05,3.74749E-05,3.59363E-05,3.44576E-05,3.30366E-05,3.16712E-05,3.03594E-05,2.90991E-05,2.78884E-05,2.67256E-05,2.56088E-05,2.45364E-05,2.35066E-05,2.25179E-05,2.15687E-05,2.06575E-05,1.9783E-05,1.89436E-05,1.81382E-05,1.73653E-05,1.66238E-05,1.59124E-05,1.523E-05,1.45755E-05,1.39477E-05,1.33457E-05,1.27685E-05,1.22151E-05,1.16846E-05,1.1176E-05,1.06885E-05,1.02213E-05,9.77365E-06,9.34467E-06,8.93366E-06,8.53991E-06,8.16273E-06,7.80146E-06,7.45547E-06,7.12414E-06,6.80688E-06,6.50312E-06,6.21233E-06,5.93397E-06,5.66753E-06,5.41254E-06,5.16853E-06,4.93505E-06,4.71165E-06,4.49794E-06,4.29351E-06,4.09798E-06,3.91098E-06,3.73215E-06,3.56116E-06,3.39767E-06,3.24138E-06,3.09198E-06,2.94918E-06,2.81271E-06,2.6823E-06,2.55768E-06,2.43862E-06,2.32488E-06,2.21623E-06,2.11245E-06,2.01334E-06,1.9187E-06,1.82833E-06,1.74205E-06,1.65968E-06,1.58105E-06,1.506E-06,1.43437E-06,1.36603E-06,1.30081E-06,1.23858E-06,1.17922E-06,1.1226E-06,1.06859E-06,1.01708E-06,9.67965E-07,9.2113E-07,8.76476E-07,8.33907E-07,7.93328E-07,7.54651E-07,7.17791E-07,6.82665E-07,6.49196E-07,6.17307E-07,5.86929E-07,5.57991E-07,5.30429E-07,5.0418E-07,4.79183E-07,4.55382E-07,4.32721E-07,4.11148E-07,3.90613E-07,3.71067E-07,3.52466E-07,3.34765E-07,3.17921E-07,3.01896E-07]})
    metadata_list = []

    im_DI = 200*((im[:, :, 2] - im[:, :, 1] )/(0.299 * im[:, :, 2] + 0.298 * im[:, :, 1]))

    # im_DI = 200*((im[:, :, 2] )/(im[:, :, 2] + im[:, :, 1] + im[:, :, 0]))
    # im_DI2 = 200*(im2[:, :, 2])/(im2[:, :, 2] + im2[:, :, 1] + im2[:, :, 0])

    ave1 = 129.08210696919892
    std1 = 258.3910900702745

    vv = 0.1
    change_color = (0, 0, 255)
    h, w = im.shape[:2]

    bcount = 0

        # 色の変更
    color_list_right = []
    color_list_left = []
    color_gray_right = []
    color_gray_left = []


    for i in range(round(h/3), round(h*2/3)):
            for j in range(0, round(w/2)):
                b, g, r = im[i, j]
                if ave1 - std1 * vv <= 200*((r - g)/(0.299 * r  + 0.298 * g)) <= ave1 + std1 * vv:
                    color_list_left.append(200*((r - g)/(0.299 * r + 0.298 * g)))
                    color_gray_left.append((0.299 * r + 0.298 * b))
                    im[i, j] = change_color
                    a += 1
                else:
                    im[i, j] = (b, g, r)

    for i in range(round(h/3), round(h*2/3)):
            for j in range(round(w/2),w):
                b, g, r = im[i, j]
                if ave1 - std1 * vv <= 200*((r - g)/(0.299 * r + 0.298 * g)) <= ave1 + std1 * vv :
                    color_list_right.append(200*((r - g)/(0.299 * r + 0.298 * g)))
                    color_gray_left.append((0.299 * r + 0.298 * b))
                    im[i, j] = change_color
                    ar += 1
                else:
                    im[i, j] = (b, g, r)

        # グレースケールに変換
    red = im[:, :, 2]
        # 二値化
    ret, thresh = cv2.threshold(red, 254, 255, 0)
        # 輪郭検出
    contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        # 面積計算
    sorted_contours = sorted(contours, key=cv2.contourArea, reverse=True)


        #for p in range(len(contours)):
    for p in range(0):
            area = cv2.contourArea(sorted_contours[p])
            M = cv2.moments(sorted_contours[p])
            if M["m00"] != 0:
                cx = int(M["m10"] / M["m00"])
                cy = int(M["m01"] / M["m00"])  
            else:
                continue
            print('Area', p+1, ':', area)
            cv2.putText(im, str(area),(cx, cy),cv2.FONT_HERSHEY_PLAIN,
                        1,(255,0,0),2,cv2.LINE_AA)

    value = round(a/(h*w*0.25*0.33),3)
    value2 = round(ar/(h*w*0.25*0.33),3)

    left_coord = calculate_offset_coordinates(lat,lon,heading-45,10)
    right_coord = calculate_offset_coordinates(lat,lon,heading+45,10)
    print(value,value2,left_coord, right_coord)
    return value, value2, left_coord, right_coord

def AI_detection(image):
# 画像ファイルのパスを再定義
# 画像を読み込んでグレースケールに変換
    # Cannyエッジ検出を適用（エッジの多さを被害の指標とする）
    edges = cv2.Canny(image, 0, 225)

    # エッジのピクセル数をカウント
    h, w = image.shape[:2]
    total_pixels = h * w
    edge_pixels = np.count_nonzero(edges)

    # 被害割合（エッジ密度）を100分率で計算
    damage_ratio = (edge_pixels / total_pixels) * 100
    return damage_ratio

def convert_RI360_3(c, lat, lon, heading):
    time = datetime.today().strftime('%Y-%m-%d %H%M%S')
    im = cv2.imread(c)
    a = 0
    ar = 0
            # BGR → RGB に変換
    image = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)
    height, width = image.shape[:2]

    image1 = image[round(height/2):round(height*2/3), 0:round(width/2)]
    image2 = image[round(height/2):round(height*2/3), round(width/2):round(width)]

            # Rチャンネル（Red）とGチャンネル（Green）を取得
    R1 = image1[:, :, 0].astype(np.float32)  # 赤
    G1 = image1[:, :, 1].astype(np.float32)  # 緑

            # Rチャンネル（Red）とGチャンネル（Green）を取得
    R2 = image2[:, :, 0].astype(np.float32)  # 赤
    G2 = image2[:, :, 1].astype(np.float32)  # 緑

            # (R - G) / (R + G) を計算（ゼロ割防止のため小さな値を足す）
    epsilon = 1e-6  # ゼロ割りエラーを防ぐための小さな値
    result1 = (R1 - G1) / (R1 + G1 + epsilon)
            #result1 = result1.astype(np.uint8)

    epsilon = 1e-6  # ゼロ割りエラーを防ぐための小さな値
    result2 = (R2 - G2) / (R2 + G2 + epsilon)
            #result2 = result2.astype(np.uint8)

    ave1, std1 = np.mean(result1), np.std(result1)
    ave2, std2 = np.mean(result2), np.std(result2)
    bunsan1 = 0
    bunsan2 = 0

    k1 = (1-2*hist["y"][round(round(std1,2)*100)])
    k2 = (1-2*hist["y"][round(round(std2,2)*100)])

    h, w = im.shape[:2]
    for i in range(round(h/3), round(h*2/3)):
        for j in range(round(w/2), round(w*3/4)):
                    b, g, r = im[i, j]
                    r = r.astype(np.float32)
                    g = g.astype(np.float32)
                    bunsan1 += ((r - g)/(r + g + 0.0001)-ave1)**2
                    if ave1 + 3*std1 <= ((r - g)/(r + g + 0.0001)):
                    #if ave1 - 0.1* std1 <= ((r - g)/(r + g + 0.0001)) <= ave1 + 0.1* std1:
                    #    a += (((r - g)/(r + g + 0.0001)))
                    #    a += ((r - g)/(r + g + 0.0001))
                    #if ave1 - std1 >= ((r - g)/(r + g + 0.0001)):
                        #a += (((r - g)/(r + g + 0.0001)-ave1)**2)
                        a += (r - g)/(r + g + 0.0001)
    p = np.mean(a)
    if p >= -1: #木材家屋
        value = AI_detection(im)
    else:
        value = 0
                    

    for k in range(round(h/3),round(h*2/3)):
        for l in range(round(w*3/4),round(w)):
                    b2, g2, r2 = im[k, l]
                    r2 = r2.astype(np.float32)
                    g2 = g2.astype(np.float32)
                    bunsan2 += ((r2 - g2)/(r2 + g2 + 0.0001)-ave2)**2
                    #if ave2 - 0.1*std2 <= ((r2 - g2)/(r2 + g2 + 0.0001)) <= ave2 + 0.1*std2:
                    if ave2 +  3*std2 <= ((r2 - g2)/(r2 + g2 + 0.0001)):
                    #   ar += (((r2 - g2)/(r2 + g2 + 0.0001)))
                    #    ar +=  ((r2 - g2)/(r2 + g2 + 0.0001))
                    #if ave2 - std2 >= ((r2 - g2)/(r2 + g2 + 0.0001)):
                        #ar += (((r2 - g2)/(r2 + g2 + 0.0001)-ave2)**2)
                        ar += (r2 - g2)/(r2 + g2 + 0.0001)
    p2 = np.mean(ar)
    if p2 >= -1: #木材家屋
        value2 = AI_detection(im)
    else:
        value2 = 0

    print("name: ", c," Point:",round(std2*1000),"mean1:",ave1," mean2:",ave2, "standard_deviation:", std1," (r-g)/(r+g)",((r - g)/(r + g)), " r-g:",r-g, "r:", r, " g:", g, "value:",value, " value2: ",value2)
    left_coord = calculate_offset_coordinates(lat, lon, heading-45, 10)
    right_coord = calculate_offset_coordinates(lat, lon, heading+45, 10)

    return value,value2,left_coord,right_coord,image1,image2

@st.cache_resource
def convert_RI360_normal_pic(c, lat, lon, heading):
    time = datetime.today().strftime('%Y-%m-%d %H%M%S')
    im = cv2.imread(c)
    a = 0
    ar = 0
            # BGR → RGB に変換
    image = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)
    height, width = image.shape[:2]

    image1 = image[round(height/2):round(height*2/3), 0:round(width/2)]
    image2 = image[round(height/2):round(height*2/3), round(width/2):round(width)]

            # Rチャンネル（Red）とGチャンネル（Green）を取得
    R1 = image1[:, :, 0].astype(np.float32)  # 赤
    G1 = image1[:, :, 1].astype(np.float32)  # 緑

            # Rチャンネル（Red）とGチャンネル（Green）を取得
    R2 = image2[:, :, 0].astype(np.float32)  # 赤
    G2 = image2[:, :, 1].astype(np.float32)  # 緑

            # (R - G) / (R + G) を計算（ゼロ割防止のため小さな値を足す）
    epsilon = 1e-6  # ゼロ割りエラーを防ぐための小さな値
    result1 = (R1 - G1) / (R1 + G1 + epsilon)
            #result1 = result1.astype(np.uint8)

    epsilon = 1e-6  # ゼロ割りエラーを防ぐための小さな値
    result2 = (R2 - G2) / (R2 + G2 + epsilon)
            #result2 = result2.astype(np.uint8)

    ave1, std1 = np.mean(result1), np.std(result1)
    ave2, std2 = np.mean(result2), np.std(result2)
    bunsan1 = 0
    bunsan2 = 0

    k1 = (1-2*hist["y"][round(round(std1,2)*100)])
    k2 = (1-2*hist["y"][round(round(std2,2)*100)])

    h, w = im.shape[:2]
    for i in range(round(h/3), round(h*2/3)):
        for j in range(0, round(w*1/2)):
                    b, g, r = im[i, j]
                    r = r.astype(np.float32)
                    g = g.astype(np.float32)
                    bunsan1 += ((r - g)/(r + g + 0.0001)-ave1)**2
                    if ave1 + 3*std1 <= ((r - g)/(r + g + 0.0001)):
                    #if ave1 - 0.1* std1 <= ((r - g)/(r + g + 0.0001)) <= ave1 + 0.1* std1:
                    #    a += (((r - g)/(r + g + 0.0001)))
                    #    a += ((r - g)/(r + g + 0.0001))
                    #if ave1 - std1 >= ((r - g)/(r + g + 0.0001)):
                        #a += (((r - g)/(r + g + 0.0001)-ave1)**2)
                        a += (r - g)/(r + g + 0.0001)
    p = np.mean(a)
    if p >= -1: #木材家屋
        value = AI_detection(im)
    else:
        value = 0
                    

    for k in range(round(h/3),round(h*2/3)):
        for l in range(round(w*1/2),round(w)):
                    b2, g2, r2 = im[k, l]
                    r2 = r2.astype(np.float32)
                    g2 = g2.astype(np.float32)
                    bunsan2 += ((r2 - g2)/(r2 + g2 + 0.0001)-ave2)**2
                    #if ave2 - 0.1*std2 <= ((r2 - g2)/(r2 + g2 + 0.0001)) <= ave2 + 0.1*std2:
                    if ave2 +  3*std2 <= ((r2 - g2)/(r2 + g2 + 0.0001)):
                    #   ar += (((r2 - g2)/(r2 + g2 + 0.0001)))
                    #    ar +=  ((r2 - g2)/(r2 + g2 + 0.0001))
                    #if ave2 - std2 >= ((r2 - g2)/(r2 + g2 + 0.0001)):
                        #ar += (((r2 - g2)/(r2 + g2 + 0.0001)-ave2)**2)
                        ar += (r2 - g2)/(r2 + g2 + 0.0001)
    p2 = np.mean(ar)
    if p2 >= -1: #木材家屋
        value2 = AI_detection(im)
    else:
        value2 = 0

    print("name: ", c," Point:",round(std2*1000),"mean1:",ave1," mean2:",ave2, "standard_deviation:", std1," (r-g)/(r+g)",((r - g)/(r + g)), " r-g:",r-g, "r:", r, " g:", g, "value:",value, " value2: ",value2)
    left_coord = calculate_offset_coordinates(lat, lon, heading-45, 10)
    right_coord = calculate_offset_coordinates(lat, lon, heading+45, 10)

    return value,value2,left_coord,right_coord,image1,image2

@st.cache_resource
def making_map(a, b, metadata_list):
    start_date = datetime.strptime(a, "%Y-%m-%d")
    end_date = datetime.strptime(b, "%Y-%m-%d")
    # JSONファイルの読み込み
    
    data = metadata_list
    data = [item for item in data
    if start_date <= datetime.strptime(item["captured_at"][:10], "%Y-%m-%d") <= end_date]

    # 地図の中心を設定（データの平均値を使用）
    if not len(data)==0:
        avg_latitude = sum(item["currentLatitude"] for item in data) / len(data)
        avg_longitude = sum(item["currentLongitude"] for item in data) / len(data)
    else:
        avg_latitude = sum(item["currentLatitude"] for item in data)
        avg_longitude = sum(item["currentLongitude"] for item in data)

    # Foliumマップの作成
    m = folium.Map(location=[avg_latitude, avg_longitude], zoom_start=15)

    # 各データポイントを地図に追加
    for item in data:
        lat = item["currentLatitude"]
        lon = item["currentLongitude"]
        popup_text = f"<a href='{item['image_url']}' target='_blank'>画像を見る</a> {item['AreaRate']}"
        scale = item["AreaRate"]

        if scale < 0.08: 
            # 被害エリアを円で表示
            folium.Circle(
                    location=[lat, lon],
                    radius=scale* 35,  # AreaRateを半径として使用
                    color="blue",
                    fill=True,
                    fill_color="blue",
                    fill_opacity=0.3,
                    popup=folium.Popup(popup_text, max_width=300),
                ).add_to(m)
        else:
            # 被害エリアを円で表示
            folium.Circle(
                    location=[lat, lon],
                    radius=scale* 35,  # AreaRateを半径として使用
                    color="red",
                    fill=True,
                    fill_color="red",
                    fill_opacity=0.3,
                    popup=folium.Popup(popup_text, max_width=300),
                ).add_to(m)
        
        # 地図を保存
        map_path = "download.html"
        m.save(map_path)
        print(f"被害状況のマップを作成しました: {map_path}")
    return m

@st.cache_resource
def making_map2(metadata_list):
    # JSONファイルの読み込み
    
    data = metadata_list
    # 地図の中心を設定（データの平均値を使用）
    if not len(data)==0:
        avg_latitude = sum(item["currentLatitude"] for item in data) / len(data)
        avg_longitude = sum(item["currentLongitude"] for item in data) / len(data)
    else:
        avg_latitude = sum(item["currentLatitude"] for item in data)
        avg_longitude = sum(item["currentLongitude"] for item in data)

    # Foliumマップの作成
    m = folium.Map(location=[avg_latitude, avg_longitude], zoom_start=15)

    # 各データポイントを地図に追加
    for item in data:
        lat = item["currentLatitude"]
        lon = item["currentLongitude"]
        popup_text = f"<a href='{item['image_url']}' target='_blank'>画像を見る</a> {item['AreaRate']}"
        scale = item["AreaRate"]

        if scale < 0.08: 
            # 被害エリアを円で表示
            folium.Circle(
                    location=[lat, lon],
                    radius=scale* 35,  # AreaRateを半径として使用
                    color="blue",
                    fill=True,
                    fill_color="blue",
                    fill_opacity=0.3,
                    popup=folium.Popup(popup_text, max_width=300),
                ).add_to(m)
        else:
            # 被害エリアを円で表示
            folium.Circle(
                    location=[lat, lon],
                    radius=scale* 35,  # AreaRateを半径として使用
                    color="red",
                    fill=True,
                    fill_color="red",
                    fill_opacity=0.3,
                    popup=folium.Popup(popup_text, max_width=300),
                ).add_to(m)

        # 地図を保存
        map_path = "download.html"
        m.save(map_path)
        print(f"被害状況のマップを作成しました: {map_path}")
    return m


def latlon_to_tile_xy(lat, lon, zoom):
    """緯度経度をXYZタイル座標に変換"""
    n = 2.0 ** zoom
    x = int((lon + 180.0) / 360.0 * n)
    y = int((1.0 - math.asinh(math.tan(math.radians(lat))) / math.pi) / 2.0 * n)
    return x, y

@st.cache_resource
def image_maker(start_date, end_date, lat_mean, lon_mean,max_value):
    # Mapillary ベクタタイルのエンドポイント

    # 取得する範囲（経度・緯度）石川県珠洲市
    #east, south, west, north = [137.3229681603, 37.4399928, 137.3119358258532, 37.44398897580275]
    # 取得する範囲（経度・緯度）熊本県益城町
    #east, south, west, north = [130.9, 32.7, 130.8, 32.8]
    # 取得する範囲（経度・緯度）花蓮（台湾）

    east, south, west, north = [lon_mean + 0.002, lat_mean - 0.002, lon_mean - 0.002, lat_mean + 0.002]


    tile_coverage = 'mly1_public'
    tile_layer = "image"


    # Mapillary Access Token（各自取得する必要あり）
    access_token = 'MLY|28337048202609587|0b9728634099ee20603722d9385b4156'

    # 指定日時以降の画像のみ取得（例: 2023年1月1日 00:00:00 以降）

    filter_date_str = start_date+" 00:00:00"
    filter_date = datetime.strptime(filter_date_str, '%Y-%m-%d %H:%M:%S')

    # ズームレベル14で取得可能なタイルリストを生成
    tiles = list(mercantile.tiles(west, south, east, north, 14))
    metadata_list = []

    # すべてのタイルをループ
    for tile in tiles:
        tile_url = f'https://tiles.mapillary.com/maps/vtp/{tile_coverage}/2/{tile.z}/{tile.x}/{tile.y}?access_token={access_token}'
        response = requests.get(tile_url)

        if response.status_code != 200:
            print(f"❌ Tile request failed: {tile_url}")
            continue

        data = vt_bytes_to_geojson(response.content, tile.x, tile.y, tile.z, layer=tile_layer)

        # タイル内の各フィーチャーを処理
        for feature in data['features']:
            lng = feature['geometry']['coordinates'][0]
            lat = feature['geometry']['coordinates'][1]

            # 指定した範囲内のデータのみ取得
            if west <= lng <= east and south <= lat <= north:
                sequence_id = feature['properties']['sequence_id']
                image_id = feature['properties']['id']
                #compass_angle = feature['properties'][.get('computed_compass_angle', None)]
                compass_angle = feature['properties']["compass_angle"]

                # すでに処理済みならスキップ（重複を防ぐ）
                if any(d['image_id'] == image_id for d in metadata_list):
                    print(f"🔄 Skipping {image_id} (already processed)")
                    continue

                # 画像のURLと撮影日時を取得（is_pano も含める）
                header = {'Authorization': f'OAuth {access_token}'}
                url = f'https://graph.mapillary.com/{image_id}?fields=thumb_2048_url,computed_compass_angle,is_pano,captured_at&camera_type=vehicle'
                r = requests.get(url, headers=header)
                data = r.json()

                # **通常のストリート画像のみ取得（360°の画像をスキップ）**
                if not data.get('is_pano', False):  # `is_pano: false` の画像はスキップ
                    pano = "else"

                else:
                    pano = "360_image"

                # 撮影日時を取得（UNIXタイム → YYYY-MM-DD HH:MM:SS 変換）
                captured_at_unix = data.get('captured_at', None)
                captured_at = datetime.utcfromtimestamp(captured_at_unix / 1000).strftime('%Y-%m-%d %H%M%S') if captured_at_unix else None

                # 指定日以前の画像はスキップ
                if captured_at and datetime.strptime(captured_at, '%Y-%m-%d %H%M%S') < filter_date:
                    print(f"⏭ Skipping {image_id} (Captured before {filter_date_str})")
                    continue

                if image_url := data.get('thumb_2048_url', None):
                    # フォルダ作成（シーケンスごと）
                    if not os.path.exists(pano):
                        os.makedirs(pano)

                    # 画像を保存
                    if pano == "360_image":
                        image_data = requests.get(image_url, stream=True).content
                        image_array = np.asarray(bytearray(image_data), dtype=np.uint8)
                        value,value2,left_coord,right_coord = convert_RI360(image_array, lat, lng, compass_angle)

                    else:
                        image_data = requests.get(image_url, stream=True).content
                        image_array = np.asarray(bytearray(image_data), dtype=np.uint8)
                        print(image_array)                        
                        value,value2,left_coord,right_coord = convert_RI_normal(image_array, lat, lng, compass_angle)

                    # メタデータを `metadata.json` に追加
                    metadata = {
                        "image_id": image_id,
                        "sequence_id": sequence_id,
                        "currentLongitude": left_coord[1],
                        "currentLatitude": left_coord[0],
                        "compass_angle": compass_angle,
                        "captured_at": captured_at,  # 撮影日時を追加
                        "image_url": image_url,
                        "AreaRate": value
                    }
                    metadata_list.append(metadata)

                    metadata = {
                        "image_id": image_id,
                        "sequence_id": sequence_id,
                        "currentLongitude": right_coord[1],
                        "currentLatitude": right_coord[0],
                        "compass_angle": compass_angle,
                        "captured_at": captured_at,  # 撮影日時を追加
                        "image_url": image_url,
                        "AreaRate": value2
                    }
                    metadata_list.append(metadata)

                    print(f"✅ {image_id} saved with metadata (Captured at: {captured_at})")
                    #making_map(start_date,end_date,metadata_list)

                    print(f"📂 データは保存されました。")
                    

                    # AreaRateが0.02以上のデータをカウント
                    filtered_count = sum(1 for item in metadata_list if item["AreaRate"] >= 0.001)
                    # 10行以上になったらストップ
                    if filtered_count > max_value:
                        filtered_metadata_list = [metadata for metadata in metadata_list if metadata["AreaRate"] >= 0.001]
                        m = making_map(start_date,end_date,filtered_metadata_list)  
                        return m

#convert_RI360_3()
#convert_RI360_2()
#image_maker(start_date="2015-04-14",end_date="2025-02-02",lat_mean=38.6, lon_mean= 139.9)
#making_map("2016-04-14","2019-05-06")

# カスタムCSSの適用
st.markdown(
    """
    <style>
    .custom-header {
        font-size: 24px;
        color: #4CAF50;
        text-align: center;
    }
    .custom-container {
        background-color: #f9f9f9;
        padding: 10px;
        border-radius: 10px;
    }
    </style>
    """,
    unsafe_allow_html=True
)
 
# カスタムスタイルを適用したヘッダー
st.markdown('<div class="custom-header">RaBDET-GVF Rapid Building Damage Extraction Technology from Ground-Based Video Footage</div>', unsafe_allow_html=True)
 
# カスタムスタイルを適用したコンテナ
with st.container():
    st.markdown('<div class="custom-container">本マッピング技術は、筑波大学大学院システム情報工学研究群 白石、臼田 著「Real-Time Building-Damage-Extraction Technology from Ground-Based Video Footage Using Normalized Difference Red/Green Redness Index(2025)」をもとに生成しており、迅速かつ正確に被害の建物を抽出するための技術です。時期と場所を指定すれば、「いつ」「どこで」「どのくらい（規模）の」被害があったのかをストリートビューデータベースやドライブレコーダー画像から抽出することができます。</div>', unsafe_allow_html=True)

# セッション状態の初期化（ボタンの状態を保持）
if "button_clicked0" not in st.session_state:
    st.session_state["button_clicked0"] = False

# メインボタン
if st.button("画像をzipファイルでアップロードする"):
    st.session_state["button_clicked0"] = True

if st.session_state["button_clicked0"]:
    zz = st.file_uploader("ZIPファイルをアップロード", type=["zip"])

    with st.form("my_form"):

            # 送信ボタン
            submitted = st.form_submit_button("送信")

            if submitted:
                zip_bytes, metadata_list = green_aspara(zz)
                m = making_map2(metadata_list=metadata_list)
                # Streamlit に表示
                st_folium(m, width=700, height=500)
                st.download_button(
                        label="マップをダウンロード (HTML)",
                        data=m,
                        file_name="map.html",
                        mime="text/html"
                    )


#st.download_button(
                #    label="処理済みZIPをダウンロード",
                #    data=zip_bytes,
                #    file_name="processed_images.zip",
                #    mime="application/zip"
                #)


# セッション状態の初期化（ボタンの状態を保持）
if "button_clicked" not in st.session_state:
    st.session_state["button_clicked"] = False

# メインボタン
if st.button("画像をオンラインで入手する"):
    st.session_state["button_clicked"] = True

if st.session_state["button_clicked"]:
        initial_location = [35.682839, 139.759455]
        lat = 35.682839
        lon = 139.759455
        m = folium.Map(location=initial_location, zoom_start=10)

            # クリックした場所のマーカーを追加するための機能
        click_marker = folium.LatLngPopup()
        m.add_child(click_marker)

            # 地図を表示し、クリック情報を取得
        map_data = st_folium(m, height=500, width=700)

            # クリックした緯度経度を表示
        if map_data and map_data.get("last_clicked"):
                lat, lon = map_data["last_clicked"]["lat"], map_data["last_clicked"]["lng"]
                st.success(f"クリックされた場所の緯度: {lat}, 経度: {lon}")

            # フォームを作成
        with st.form("my_form2"):
                lat_mean = st.number_input("緯度を入力してください", format="%.4f", step=0.0001,value=lat)
                lon_mean = st.number_input("経度を入力してください", format="%.4f", step=0.0001,value=lon)
                date = st.date_input("日付（開始日）を選択してください",format="YYYY-MM-DD", value=datetime.today())
                date2 = st.date_input("日付（終日）を選択してください",format="YYYY-MM-DD", value=datetime.today())
                max_value = st.number_input("出力する被災建物の個数を入力してください（※最大被災建物個数を超えるとエラーがでます。）", format="%.0f", step=float(1),min_value=float(1))
                
                # 送信ボタン
                submitted = st.form_submit_button("送信")

                if submitted:
                    st.session_state["button_clicked"] = True
                    st.write(f"緯度: {lat_mean}")
                    st.write(f"経度: {lon_mean}")
                    st.write(f"期間:{str(date)}-{str(date2)}")
                    st.write(f"最大個数:{max_value}")
                    st.success("データが送信されました！")
                    m = image_maker(start_date=str(date),end_date=str(date2),lat_mean=lat_mean, lon_mean=lon_mean,max_value=max_value)

                    html_data = io.BytesIO()
                    m.save(html_data)  # Folium の `save()` は bytes を扱う
                    html_str = html_data.getvalue().decode("utf-8")  # `bytes` を `str` に変換
                    html_data.close()  # データ取得後に閉じる
                                        
                    # Streamlit アプリ
                    st.title("Folium Map Download Example")
                    st_folium(m, width=700, height=500)
                    # ダウンロードボタン
                    st.download_button(
                        label="マップをダウンロード (HTML)",
                        data=html_str,
                        file_name="map.html",
                        mime="text/html"
                    )
